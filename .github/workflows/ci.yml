name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  FLUTTER_VERSION: '3.16.0'

jobs:
  # Lint and format checks
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint TypeScript/JavaScript
        run: npm run lint
      
      - name: Check TypeScript types
        run: npm run type-check
      
      - name: Format check
        run: npm run format:check
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
      
      - name: Flutter pub get
        run: |
          cd apps/mobile
          flutter pub get
      
      - name: Flutter analyze
        run: |
          cd apps/mobile
          flutter analyze
      
      - name: Flutter format check
        run: |
          cd apps/mobile
          flutter format --dry-run --set-exit-if-changed .

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Setup Node.js for security audit
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: npm audit
        run: npm audit --audit-level=high

  # Web app testing
  test-web:
    name: Test Web App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run web tests
        run: npm run test:web
        env:
          CI: true
      
      - name: Run web e2e tests
        run: npm run test:e2e:web
        env:
          CI: true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/web/coverage/lcov.info
          flags: web
          name: web-coverage

  # Mobile app testing
  test-mobile:
    name: Test Mobile App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
      
      - name: Flutter pub get
        run: |
          cd apps/mobile
          flutter pub get
      
      - name: Run Flutter tests
        run: |
          cd apps/mobile
          flutter test --coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/mobile/coverage/lcov.info
          flags: mobile
          name: mobile-coverage

  # Build web app
  build-web:
    name: Build Web App
    runs-on: ubuntu-latest
    needs: [lint, test-web]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build web app
        run: npm run build:web
        env:
          NODE_ENV: production
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: apps/web/dist/
          retention-days: 7

  # Build mobile app
  build-mobile:
    name: Build Mobile App
    runs-on: ubuntu-latest
    needs: [lint, test-mobile]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
      
      - name: Flutter pub get
        run: |
          cd apps/mobile
          flutter pub get
      
      - name: Build APK
        run: |
          cd apps/mobile
          flutter build apk --release
      
      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: mobile-apk
          path: apps/mobile/build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7

  # iOS build (only on macOS runners)
  build-ios:
    name: Build iOS App
    runs-on: macos-latest
    needs: [lint, test-mobile]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
      
      - name: Flutter pub get
        run: |
          cd apps/mobile
          flutter pub get
      
      - name: Build iOS (no codesign)
        run: |
          cd apps/mobile
          flutter build ios --release --no-codesign
      
      - name: Upload iOS build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-build
          path: apps/mobile/build/ios/iphoneos/
          retention-days: 7

  # Database migration testing
  test-database:
    name: Test Database Migrations
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: climbing_logbook_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install PostgreSQL extensions
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      
      - name: Test base schema
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d climbing_logbook_test -f packages/db/supabase/schema.sql
      
      - name: Test production schema
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d climbing_logbook_test -f packages/db/supabase/production-schema.sql
      
      - name: Test production config
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d climbing_logbook_test -f packages/db/supabase/production-config.sql

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-web, build-mobile, test-database, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Download web build
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: ./dist
      
      - name: Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web
          scope: ${{ secrets.VERCEL_ORG_ID }}
      
      - name: Run staging smoke tests
        run: npm run test:smoke:staging
        env:
          STAGING_URL: ${{ steps.deploy.outputs.preview-url }}

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-web, build-mobile, test-database, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Download web build
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: ./dist
      
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./apps/web
          scope: ${{ secrets.VERCEL_ORG_ID }}
      
      - name: Run production smoke tests
        run: npm run test:smoke:production
        env:
          PRODUCTION_URL: https://climblog.app
      
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'ðŸš€ Production deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      
      - name: Run load tests
        run: npm run test:load
        env:
          TARGET_URL: ${{ needs.deploy-staging.outputs.staging-url }}

  # Mobile app distribution
  distribute-mobile:
    name: Distribute Mobile App
    runs-on: ubuntu-latest
    needs: [build-mobile]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download APK
        uses: actions/download-artifact@v3
        with:
          name: mobile-apk
          path: ./
      
      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          groups: testers
          file: app-release.apk
          releaseNotes: 'Latest build from main branch'

  # Cleanup
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [deploy-production, distribute-mobile]
    if: always()
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            web-build
            mobile-apk
            ios-build
          failOnError: false 